---
const { links = [] } = Astro.props;
---

<header class="sticky top-2">
  <nav
    class="px-4 flex gap-5 justify-center items-center py-3 mb-4 flex-wrap border-r-0 rounded-xl bg-slate-800"
  >
    <a href="#" class="hidden text-blue-500"></a>
    {
      links.map(({ label, link }: any) => (
        <a
          class="hover:text-blue-500 text-sm"
          href={`#${link}`}
          data-link={`#${link}`}
        >
          {label}
        </a>
      ))
    }

    <a href="/" class="text-red-400 text-sm">
      <img src="/portafolio-yinner-chilito/spanish.png" class="h-[30px]" alt="Spanish icon" />
    </a>
    <a href="/en" class="text-blue-400 text-sm">
      <img src="/portafolio-yinner-chilito/english.png" class="h-[30px]" alt="English icon" /></a
    >
  </nav>
</header>

<script>
  // Seleccionar todas las secciones y enlaces
  const sections = document.querySelectorAll("section");
  const navLinks = document.querySelectorAll("[data-link]");

  // Opciones para el Intersection Observer
  const observerOptions = {
    root: null,
    rootMargin: "-50% 0px", // Ajusta este valor según necesites
    threshold: 0,
  };

  // Crear el observer
  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        // Obtener el id de la sección actual
        const id = `#${entry.target.id}`;

        // Actualizar clases de los enlaces
        navLinks.forEach((link) => {
          if (link.getAttribute("data-link") === id) {
            link.classList.add("text-blue-500");
          } else {
            link.classList.remove("text-blue-500");
          }
        });
      }
    });
  }, observerOptions);

  // Observar todas las secciones
  sections.forEach((section) => {
    observer.observe(section);
  });
</script>
